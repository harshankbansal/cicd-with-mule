name: Deployment to production

on:
  push:
    branches:
      - release/*
  workflow_call:
    inputs:
      withVersion:
        type: string
        required: true
      commitSHA:
        type: string
        required: true
        
defaults:
  run:
    shell: bash
    
jobs:

  get-pom-semver:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    name: Get Pom Version
    outputs:
      pomVersion: ${{ steps.getPomVersion.outputs.pomVersion }}
    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: 8  
          distribution: zulu
          architecture: x64
          overwrite-settings: false
          
      - uses: actions/checkout@v4
        
      - id: getPomVersion
        name: Get Pom Version
        run: |
            pomVersion=$(mvn help:evaluate '-Dexpression=project.version' -q -DforceStdout)
            echo "Version retrieved from POM: $pomVersion"
            echo "pomVersion=$pomVersion" >> "$GITHUB_OUTPUT" 
            
  create-git-tag:
    runs-on: ubuntu-latest
    name: Create tag
    needs: 
      - get-pom-semver
    if: |
      always() &&
      (needs.get-pom-semver.result == 'success' || needs.get-pom-semver.result == 'skipped')
    env:
      TAG_NAME: v${{ inputs.withVersion || needs.get-pom-semver.outputs.newPomVersion }}
      TAG_SHA: ${{ inputs.commitSHA || github.sha }}
    outputs:
      tagName: ${{ steps.createTag.outputs.result }}
    steps:
      - name: Create tag
        id: createTag
        uses: actions/github-script@v5
        with:
          script: |
            console.log(`Creating tag with name: ${process.env.TAG_NAME} on SHA: ${process.env.TAG_SHA}`)
            const createRefResponse = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.TAG_NAME}`,
              sha: process.env.TAG_SHA
            })
            console.log(`Tag created: ${createRefResponse.data.url}`)
            return process.env.TAG_NAME;

  publish-to-artifactory:  
    name: Publish to artifactory
    needs:
      - create-git-tag
    if: always() && !failure()
    uses: ./.github/workflows/publish-to-exchange.yaml
    with:
      gitRef: tags/${{ needs.create-git-tag.outputs.tagName }}
    secrets: inherit
  
  deployToProd:
    name: Deploy to Production
    needs: 
      - publish-to-artifactory
    if: always() && !failure()
    uses: ./.github/workflows/deploy.yaml
    with:
      targetEnv: Production
    secrets: inherit
