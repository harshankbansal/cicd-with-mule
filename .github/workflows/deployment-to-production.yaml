name: Deployment to production

on:
  push:
    branches:
      - release/*
  workflow_call:
    inputs:
      withVersion:
        type: string
        required: true
      commitSHA:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      branchName:
        description: Name of release branch. Must start with 'release/'
        type: string
        required: true
        
defaults:
  run:
    shell: bash
    
jobs:

  determine-commit-sha:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.setCommitSha.outputs.sha }}
    steps:
      - name: Verify branch
        if: (github.event_name == 'workflow_dispatch') && !startsWith(inputs.branchName, 'release/')
        run: |
          echo "Invalid branch name. Release branch should start with 'release/'"
          exit 1
      - uses: actions/checkout@v4
      - name: Set Commit SHA
        id: setCommitSha
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_SHA: ${{ inputs.commitSHA }}
          INPUT_BRANCH: ${{ inputs.branchName }}
        run: |
          echo "github.event_name = ${EVENT_NAME}"
          echo "INPUT_SHA = ${INPUT_SHA}"
          echo "INPUT_BRANCH = ${INPUT_BRANCH}"
          if [ "${EVENT_NAME}" == "workflow_dispatch" ]; then
            commitSHA = $(git rev-parse ${INPUT_BRANCH})
          elif [ "${EVENT_NAME}" == "push" ]; then
            commitSHA = ${GITHUB_SHA}
          elif [ "${EVENT_NAME}" == "workflow_call" ]; then
            commitSHA = ${INPUT_SHA}
          else
            echo "Unable to determine commit SHA for deployment"
            exit 1
          fi
          echo "Retrieved SHA = ${commitSHA}"
          echo "sha=$(commitSHA)" >> $GITHUB_OUTPUT

  get-pom-semver:
    runs-on: ubuntu-latest
    needs:
      - determine-commit-sha
    if: inputs.withVersion == ''
    name: Get version from pom if needed
    outputs:
      pomVersion: ${{ steps.getPomVersion.outputs.pomVersion }}
    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: 8  
          distribution: zulu
          architecture: x64
          overwrite-settings: false
          
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-commit-sha.outputs.sha }}
        
      - id: getPomVersion
        name: Get Pom Version
        run: |
            pomVersion=$(mvn help:evaluate '-Dexpression=project.version' -q -DforceStdout)
            echo "Version retrieved from POM: $pomVersion"
            echo "pomVersion=$pomVersion" >> "$GITHUB_OUTPUT" 
            
  create-git-tag:
    runs-on: ubuntu-latest
    name: Create tag
    needs: 
      - determine-commit-sha
      - get-pom-semver
    if: always() && !failure()
    env:
      TAG_NAME: v${{ inputs.withVersion || needs.get-pom-semver.outputs.pomVersion }}
      TAG_SHA: ${{ needs.determine-commit-sha.outputs.sha }}
    outputs:
      tagName: ${{ steps.createTag.outputs.result }}
    steps:
      - name: Create tag
        id: createTag
        uses: actions/github-script@v5
        with:
          script: |
            console.log(`Creating tag with name: ${process.env.TAG_NAME} on SHA: ${process.env.TAG_SHA}`)
            const createRefResponse = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.TAG_NAME}`,
              sha: process.env.TAG_SHA
            })
            console.log(`Tag created: ${createRefResponse.data.url}`)
            return process.env.TAG_NAME;

  deploy:  
    name: Deploy to production
    needs:
      - create-git-tag
    if: always() && !failure()
    uses: ./.github/workflows/publish-and-deploy.yaml
    with:
      gitRef: ${{ fromJSON(needs.create-git-tag.outputs.tagName) }}
      targetEnv: Production
    secrets: inherit
 
